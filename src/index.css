:root {            /* Pseudo Class  <html> tag* :root targets the very top element of your document (the <html> tag in HTML)*/        
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color: white;
  background-color: #030615;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}      

/* Univerisal selector, the style gets applied to literallt everything in the documnent, every html tag */

*{
  margin:0 ;   /* Setting the margin to 0, removing any predefined element margin */
  padding : 0; /* Setting the padding to 0, removing any predefined element padding*/
  box-sizing : border-box; /* Best practice for managing the CSS box model, includes padding and border */
}

/* This enables us to remove inconsistent default browser spacing and make element sizing predictable  */

/* If you want to style using ID, you use # { pound } */

#root {
  min-height: 100vh;   /* Takes 100% of the viewport { the visible area within a browser window } */
  display: flex; 
  position: relative; /*  Establishes a positioning context for any absolutely positioned child elements within it. */
}

/* The root ID is associated the div element that React uses to display your final applciation */
/* Applying display: flex; makes the direct children of #root become flex items, and by default, they will arrange themselves in a row (left-to-right)*/

/* If you want to style using className, you use . */

.bgImage {
  width: 100%;    /* Fills 100% of parent's width */
  height : 100%; /* Fills 100% of parent's height */
  flex: 1;  /* shorthand for flex-grow: 1; flex-shrink :1;  flex-basis : 0%      --  Allows the element to grow or shrink based on the available space*/  
  object-fit: cover; /* The actual image/video content inside this element will be stretched to completely cover its own allocated space, cropped if its original proportion don't match */
}

/* Using this to make the image look more aesthetic*/

.imgContainer {
  display: flex;   /* converts the element to a flex container */ 
  flex-direction: column; /* display direction will now be top-down */
}

/* If you want to style using tag, you use tag name iteself */

footer {
  position: fixed; /* The footer is now removed from the normal document flow, it doesn't depend on #root anymore*/ 
  bottom: 0; /*Positions the bottom edge of the footer at 0 pixels from the bottom edge of the viewport.*/
  left: 0; /*Positions the left  edge of the footer at 0 pixels from the left edge of the viewport.*/
  width : 100%; /* Makes the footer stretch 100% of the viewport's width */

  /* Moving the info button to the right corner */ 

  /* The footer component has 2 elements, the div tag with name and description and the button tag, the below adds space between them */

  display : flex;
  align-items : center; /* Aligns the elements to the center of the cross-axis, row by default, column if flex direction changed to column */
  justify-content: space-between; /* Pushes the first element to the very left and the last element to the very right and distributes remaining space evenly between them*/
  gap: 1rem;  /* gap between the elements */ /* rem stands for root em -  It's a relative unit of measurement that is based on the font-size of the root element of the document. */ 
}


.bgGradient{
  position: absolute; /* This removes the element from normal document flow and positions itself relative to its position ancestor */

  /* It is removed from the document flow but not removed from the document tree */ 

  inset:0; /* shorthand for top:0, left:0, bottom :0, right: 0 */ /* stretch and cover the entire surface you are stuck onto */
  z-index: -1; /* The higher value index stacks on top of lower value index, the default parent value would be 0, so this makes the gradient go below the footer as intended */
  background : linear-gradient(to top, #030615, rgba(255,255,255, 0)); /* (gradient will start at the bottom and moves towards top, starting color of the gradient, ending color of the gradient */ 
}

/*This is to make sure the text in the footer is more brighter and visible with the gradient added */
/*Position ancestor is any element with a position value except static, the position ancestor of this newly created div element is the footer */

/*<div className="sidebar">
    <div className="bgOverlay"></div>
    <div className="sidebarContents">
        <h2> Martian Landscape</h2>
          <div>
            <p> Description</p>
            <p> ioasfiuahfiugairsbfguiarhgipuabvouiasebviuadhrgvpiuaerbvipaeurrvbjkaerbveb</p>
        </div>

        <button>
        </button>
    </div>
</div> */

.sidebar{
  position: fixed;  /* Positioned relative to the viewport */
  inset : 0;
  display: flex;
  flex-direction: column;
  z-index: 10;
}

/* This makes the div elements, bgOverlay and sidebarContents appear left-right */

.bgOverlay {
  position: absolute; /* positioned relative to the closest positioned ancestor */
  inset: 0;
  background: #030615;
  opacity: 0.6;
}


.sidebarContents {
  z-index: 15;
  position: relative; /* Element stays in the normal document flow, it still occupies the original space */ 
                      /* Establishes positioning context for any absolute children, the children will position themselves relative to this relative parent*/
  display : flex; 
  flex-direction : column;
  gap: 1rem;
  padding : 1rem;
  overflow-y: scroll;  /* adding a vertical scroll bar, enabling the user to view the content if it exceeds the vertical height */
  height: 100%;
  width : 90%;
  max-width : 800px;
  margin-left: auto;   /* auto margins withing a flex container */
  background : #030615;
}

.sidebarContents div {
  flex: 1;
}

.sidebarContents button {
  background: transparent;
  color : white;
  border : none;
  outline : none;
  margin-right : auto;
}